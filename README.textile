h1. APNS

a gem for the Apple Push Notification Service for Rails 3.

h2. Install

sudo gem install apns

h2. Setup:

Convert your certificate

In Keychain access export your certificate as a p12. Then run the following command to convert it to a .pem

<pre>
  <code>
    openssl pkcs12 -in cert.p12 -out cert.pem -nodes -clcerts
  </code>
</pre>

After you have your .pem file. Set what host, port, certificate file location on the APNS class:

<pre>
  <code>
    APNS.host = 'gateway.push.apple.com' 
    # gateway.sandbox.push.apple.com is default

    APNS.pem  = '/path/to/pem/file'
    # this is the file you just created
    
    APNS.port = 2195 
    # this is also the default. Shouldn't ever have to set this, but just in case Apple goes crazy, you can.
  </code>
</pre>

h2. Example (Single notification):

Sending a push notification is sending a payload.

You may create payloads with APNS::Notification.to_payload() or get it from APNS::Notification#to_payload
The payload is composed of a device-token and a message all mixed and encoded together.
Payload message can either just be a alert string or a hash that lets you specify the alert, badge, sound and any custom field.

<pre>
  <code>
    device_token = '123abc456def'

    APNS.send_payload(APNS::Notification.to_payload(device_token, 'Hello iPhone!'))

    APNS.send_payload(APNS::Notification.to_payload(device_token, :alert => 'Hello iPhone!', :badge => 1, :sound => 'default'))
  </code>
</pre>

h2. Example (Multiple notifications):

You can also send multiple notifications using the same connection to Apple:

<pre>
  <code>
    device_token = '123abc456def'

    n1 = APNS::Notification.new(device_token, 'Hello iPhone!' )

    n2 = APNS::Notification.new(device_token, :alert => 'Hello iPhone!', :badge => 1, :sound => 'default')
    
    APNS.send_payload([n1.to_payload, n2.to_payload])
  </code>
</pre>


h2. Send other info along with aps

You can send other application specific information as well.

<pre>
  <code>
    APNS.send_payload(APNS::Notification.to_payload(device_token, :alert => 'Hello iPhone!', :badge => 1, :sound => 'default', :sent => 'with apns gem'))
  </code>
</pre>

This will add the :sent key to the same level as the "aps" key:

<pre>
  <code>
    {"aps":{"alert":"Hello iPhone!","badge":1,"sound":"default"},"sent":"with apns gem"}
  </code>
</pre>


h2. Getting your iPhone's device token

After you setup push notification for your application with Apple. You need to ask Apple for you application specific device token.

ApplicationAppDelegate.m
<pre>
  <code>
    - (void)applicationDidFinishLaunching:(UIApplication *)application {    
        // Register with apple that this app will use push notification
        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeAlert | 
          UIRemoteNotificationTypeSound | UIRemoteNotificationTypeBadge)];	
    }

    - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
        // Show the device token obtained from apple to the log
        NSLog(@"deviceToken: %@", deviceToken);
    }
  </code>
</pre>
    


